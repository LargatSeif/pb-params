import { pbParams } from '../src'
import PocketBase from 'pocketbase'

// Example types that would be generated by pocketbase-typegen
interface UsersRecord {
  id: string
  name: string
  email: string
  age: number
  verified: boolean
  status: 'active' | 'inactive' | 'pending'
  profile: {
    avatar?: string
    bio?: string
  }
  organization: {
    id: string
    name: string
    slug: string
  }
  created: Date
  updated: Date
}

interface PostsRecord {
  id: string
  title: string
  content: string
  author: string // Reference to users
  tags: string[]
  published: boolean
  created: Date
}

// Initialize PocketBase
const pb = new PocketBase('http://127.0.0.1:8090')

// Example 1: Basic filtering
async function getActiveUsers() {
  const params = pbParams<UsersRecord>()
    .filter(q => q
      .equal('status', 'active')
      .and()
      .equal('verified', true)
    )
    .build()

  return await pb.collection('users').getList(1, 20, params)
}

// Example 2: Field selection and expansion
async function getUsersWithProfiles() {
  const params = pbParams<UsersRecord>()
    .fields(['id', 'name', 'email', 'status'])
    .expand(['profile', 'organization'])
    .sort(['-created'])
    .build()

  return await pb.collection('users').getList(1, 20, params)
}

// Example 3: Search functionality
async function searchUsers(searchTerm: string) {
  const params = pbParams<UsersRecord>()
    .filter(q => q
      .search(['name', 'email'], searchTerm)
      .and()
      .equal('status', 'active')
    )
    .fields(['id', 'name', 'email'])
    .sort(['name'])
    .build()

  return await pb.collection('users').getList(1, 50, params)
}

// Example 4: Complex filtering with date ranges
async function getRecentActiveUsers() {
  const params = pbParams<UsersRecord>()
    .filter(q => q
      .equal('status', 'active')
      .and()
      .greaterThan('created', '@monthStart')
      .and()
      .in('age', [25, 30, 35, 40])
    )
    .expand(['organization'])
    .sort(['-created'])
    .page(1, 10)
    .build()

  return await pb.collection('users').getList(1, 10, params)
}

// Example 5: Conditional parameter building
async function getUsersWithFilters(filters: {
  includeInactive?: boolean
  searchTerm?: string
  sortBy?: 'name' | 'created'
  includeProfiles?: boolean
}) {
  const params = pbParams<UsersRecord>()
    .filter(q => {
      let builder = q.equal('verified', true)
      
      if (!filters.includeInactive) {
        builder = builder.and().equal('status', 'active')
      }
      
      return builder
    })
    .filterIf(!!filters.searchTerm, q => q
      .and()
      .search(['name', 'email'], filters.searchTerm!)
    )
    .expandIf(!!filters.includeProfiles, ['profile'])
    .sortIf(filters.sortBy === 'name', ['name'])
    .sortIf(filters.sortBy === 'created', ['-created'])
    .build()

  return await pb.collection('users').getList(1, 20, params)
}

// Example 6: Nested expansion with field selection
async function getPostsWithAuthors() {
  const params = pbParams<PostsRecord>()
    .filter(q => q.equal('published', true))
    .fields(['id', 'title', 'created'])
    .expand({
      author: ['id', 'name', 'email'] // Only select specific fields from expanded author
    })
    .sort(['-created'])
    .build()

  return await pb.collection('posts').getList(1, 20, params)
}

// Example 7: Using buildTyped for type inference
async function getTypedUserData() {
  const result = pbParams<UsersRecord>()
    .fields(['id', 'name', 'email'])
    .expand(['profile'])
    .buildTyped()

  console.log('Query params:', result.params)
  console.log('Raw filter:', result.raw)
  // result.resultType would contain inferred type information

  return await pb.collection('users').getList(1, 20, result.params)
}

// Example 8: Advanced filtering with groups
async function getComplexUserQuery() {
  const params = pbParams<UsersRecord>()
    .filter(q => q
      .group(subQ => subQ
        .equal('status', 'active')
        .or()
        .equal('status', 'pending')
      )
      .and()
      .group(subQ => subQ
        .greaterThan('age', 18)
        .and()
        .lessThan('age', 65)
      )
      .and()
      .isNotNull('email')
    )
    .fields(['id', 'name', 'email', 'age', 'status'])
    .sort(['name'])
    .build()

  return await pb.collection('users').getList(1, 20, params)
}

// Export examples for testing/documentation
export {
  getActiveUsers,
  getUsersWithProfiles,
  searchUsers,
  getRecentActiveUsers,
  getUsersWithFilters,
  getPostsWithAuthors,
  getTypedUserData,
  getComplexUserQuery,
}